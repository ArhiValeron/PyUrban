# Задание "Раз, два, три, четыре, пять .... Это не всё?":
# Все ученики урбана, без исключения, - очень умные ребята. Настолько умные, что иногда по утру сами путаются в том, что намудрили вчера вечером.
# Один из таких учеников уснул на клавиатуре в процессе упорной учёбы (ещё и трудолюбивые). Тем не менее, даже после сна, его код остался рабочим и выглядел следующим образом:
#
# data_structure = [
#   [1, 2, 3],
#   {'a': 4, 'b': 5},
#   (6, {'cube': 7, 'drum': 8}),
#   "Hello",
#   ((), [{(2, 'Urban', ('Urban2', 35))}])
# ]
#
# Увидев это студент задался вопросом: "А есть ли универсальное решение для подсчёта суммы всех чисел и длин всех строк?"
# Да, выглядит страшно, да и обращаться нужно к каждой внутренней структуре (списку, словарю и т.д.) по-разному.
#
# Ученику пришлось каждый раз использовать индексацию и обращение по ключам - универсального решения для таких структур он не нашёл.
#
# Помогите сокурснику осуществить его задумку.
#
# Что должно быть подсчитано:
# Все числа (не важно, являются они ключами или значениям или ещё чем-то).
# Все строки (не важно, являются они ключами или значениям или ещё чем-то)
#
#


def calculate_structure_sum(*args):
    bull_shit = 0
    for i in args:
        if type(i) == str:
            bull_shit += len(i)
            continue
        elif type(i) == int or type(i) == float or type(i) == complex:
            bull_shit += i
            continue
        elif isinstance(i, dict):
            bull_shit += calculate_structure_sum(*i.keys())
            bull_shit += calculate_structure_sum(*i.values())
            continue
        elif isinstance(i, (list, set, tuple)):
            bull_shit += calculate_structure_sum(*i)
    return bull_shit


data_structure = [
    [1, 2, 3],                              #6
    {'a': 4, 'b': 5},                       #11
    (6, {'cube': 7, 'drum': 8}),            #29
    "Hello",                                #5
    ((), [{(2, 'Urban', ('Urban2', 35))}])  #48
]                                              # = 99


print(data_structure)
result = calculate_structure_sum(data_structure)
print(result)
